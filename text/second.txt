1. 클래스 컴포넌트

  1) 클래스 컴포넌트 만들기

     - 클래스 컴포넌트 만드는 단축키: rcc (reactClassComponent)

     ex)
        import React, { Component } from 'react'

        export default class App extends Component {

            constructor(props){
              super(props)
              // state를 객체 형태로 정의
              this.state = {
                counter: 0,
                num: 1,
                value: 0
              }
            }

            increase = () => {
              this.setState({counter: this.state.counter + 1})
            }

          render() {
            return (
                <div>
                  <div>{this.state.counter}</div>
                  <button onClick = {this.increase}>클릭!</button>
                </div>
            )
          }
        }

      * props의 경우에도 this.props.속성값 형태로 사용

2. 리액트 lifeCycle
  
  1) 클래스 컴포넌트 lifecycle

      - Mounting  
          constructor() >> render() >> componentDidMount()

          constructor(): state 정의
          render(): UI
          componentDidMount(): api 콜

      - Updating
          render() >> componentDidUpdate()

          render(): UI
          componentDidUpdate(): 최신 업데이트 된 state값을 받아 볼 수 있음 (render 뒤에 업데이트 된 값을 볼 수 있다.)

      - Unmounting
          componentWillUnmount()

  2) 함수형 컴포넌트 lifecycle
        
      useEffect() 함수의 첫 번째 인자에는 콜백함수, 두 번째 인자에는 배열이 들어감
      
      - useEffect(() => {}, []) (배열이 비어있는 경우)
          클래스 컴포넌트 lifecycle의 componentDidMount() 역할 (초기 api콜)
        
      - useEffect(() => {}, [counter]) (배열 안에 state가 있는 경우)
          counter의 state가 변하면 콜백함수 안에 내용을 실행
          클래스 컴포넌트 lifecycle의 componentDidUpdate() 역할 (배열 안에 있는 state가 업데이트 되면 업데이트가 된 값을 보여줌)
      
      * useEffect()를 통하여 state를 동기적으로 처리 가능

